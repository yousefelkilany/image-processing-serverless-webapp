---
import ImagesGallery from "../../components/ImagesGallery.astro";
import ImageUploadForm from "../../components/ImageUploadForm";
import { getLangFromUrl, useTranslations } from "../../i18n/utils";
import Layout from "../../layouts/Layout.astro";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

let img_object_key =
    "856c9053-ece5-4d85-a97f-e7de78d80732-gpt2_124M_loss.png";
const CDN_BASE_URL = "https://cdn.yousefelkilany.com";
---

<Layout title={t("imageUpload.title")} lang={lang}>
    <main class="container mx-auto">
        <section>
            <h1>{t("imageUpload.heading")}</h1>

            <p class="mb-4">{t("imageUpload.description")}</p>

            <ImageUploadForm t={t} client:load  />

            <ImagesGallery
                img_data={[
                    {
                        src: `${CDN_BASE_URL}/resized-400x400/${img_object_key}`,
                        name: "400x400",
                    },
                    {
                        src: `${CDN_BASE_URL}/resized-200x200/${img_object_key}`,
                        name: "200x200",
                    },
                    {
                        src: `${CDN_BASE_URL}/resized-100x100/${img_object_key}`,
                        name: "100x100",
                    },
                ]}
            />
        </section>
    </main>

    <script is:inline>
        const uploadingStatus = document.getElementById("uploading");
        const successStatus = document.getElementById("success");
        const errorStatus = document.getElementById("error");
        const messageStatus = document.getElementById("message");
        const form = document.querySelector("form");
        const fileInput = document.getElementById("file");
        const uploadStatus = document.getElementById("uploadStatus");
        const imagePreviewContainer = document.getElementById(
            "imagePreviewContainer",
        );
        const imagePreview = document.getElementById("imagePreview");
        const clearImageButton = document.getElementById("clearImageButton");
        const submitButtonContainer = document.getElementById(
            "submitButtonContainer",
        );
        const imageUploadBtnLabel = document.getElementById(
            "imageUploadBtnLabel",
        );
        const imageUploadBtnAnotherLabel = document.getElementById(
            "imageUploadBtnAnotherLabel",
        );

        const setElmVisible = (elm) => {
            if (elm.classList.contains("hidden")) {
                elm.classList.remove("hidden");
            }
        };

        const setElmHidden = (elm) => {
            if (!elm.classList.contains("hidden")) {
                elm.classList.add("hidden");
            }
        };

        const setUploadBtnAnotherLabelVisibilty = (visible) => {
            if (visible) {
                setElmHidden(imageUploadBtnLabel);
                setElmVisible(imageUploadBtnAnotherLabel);
            }
            if (!visible) {
                setElmVisible(imageUploadBtnLabel);
                setElmHidden(imageUploadBtnAnotherLabel);
            }
        };

        const clearImage = () => {
            imagePreview.src = "#";
            setElmHidden(imagePreviewContainer);
            setElmHidden(submitButtonContainer);
            // Clear status messages/animations
            uploadStatus
                .querySelectorAll("div")
                .forEach((el) => setElmHidden(el));
            messageStatus.textContent = "";
            setUploadBtnAnotherLabelVisibilty(false);
        };

        fileInput.addEventListener("change", (event) => {
            const file = event.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = (e) => {
                    imagePreview.src = e.target.result;
                    setElmVisible(imagePreviewContainer);
                    setElmVisible(submitButtonContainer);
                };
                reader.readAsDataURL(file);
                setUploadBtnAnotherLabelVisibilty(true);
            } else {
                clearImage();
            }
        });

        form.addEventListener("submit", async (event) => {
            event.preventDefault();

            setElmVisible(uploadingStatus);
            setElmHidden(successStatus);
            setElmHidden(errorStatus);
            setElmHidden(messageStatus);
            messageStatus.textContent = "";

            try {
                const formData = new FormData(form);
                const responseApi = await fetch("/api/imageUpload", {
                    method: "POST",
                    body: formData,
                });

                const resultApi = await responseApi.json();
                if (responseApi.ok) {
                    setElmHidden(uploadingStatus);
                    setElmVisible(successStatus);
                    messageStatus.textContent =
                        resultApi.message || "File uploaded successfully!";
                    setElmVisible(messageStatus);
                    messageStatus.className =
                        "mt-4 text-sm text-green-600 text-center";
                    console.log("Upload successful:", resultApi);
                } else {
                    setElmHidden(uploadingStatus);
                    setElmVisible(errorStatus);
                    messageStatus.textContent =
                        resultApi.message || "Upload failed.";
                    setElmVisible(messageStatus);
                    messageStatus.className =
                        "mt-4 text-sm text-red-600 text-center";
                    console.error("Upload failed:", resultApi);
                }
            } catch (error) {
                setElmHidden(uploadingStatus);
                setElmVisible(errorStatus);
                messageStatus.textContent =
                    "Upload failed due to a network or server error.";
                setElmVisible(messageStatus);
                messageStatus.className =
                    "mt-4 text-sm text-red-600 text-center";
                console.error("Fetch error:", error);
            }
        });

        clearImageButton.addEventListener("click", () => {
            fileInput.value = "";
            clearImage();
        });
    </script>
</Layout>
